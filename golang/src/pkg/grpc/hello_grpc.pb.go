// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: hello.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GreetignServiceClient is the client API for GreetignService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GreetignServiceClient interface {
	Hello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloResponse, error)
	// server streaming gRPC
	HelloServerStream(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (GreetignService_HelloServerStreamClient, error)
}

type greetignServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGreetignServiceClient(cc grpc.ClientConnInterface) GreetignServiceClient {
	return &greetignServiceClient{cc}
}

func (c *greetignServiceClient) Hello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloResponse, error) {
	out := new(HelloResponse)
	err := c.cc.Invoke(ctx, "/myapp.GreetignService/Hello", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greetignServiceClient) HelloServerStream(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (GreetignService_HelloServerStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &GreetignService_ServiceDesc.Streams[0], "/myapp.GreetignService/HelloServerStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &greetignServiceHelloServerStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GreetignService_HelloServerStreamClient interface {
	Recv() (*HelloResponse, error)
	grpc.ClientStream
}

type greetignServiceHelloServerStreamClient struct {
	grpc.ClientStream
}

func (x *greetignServiceHelloServerStreamClient) Recv() (*HelloResponse, error) {
	m := new(HelloResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GreetignServiceServer is the server API for GreetignService service.
// All implementations must embed UnimplementedGreetignServiceServer
// for forward compatibility
type GreetignServiceServer interface {
	Hello(context.Context, *HelloRequest) (*HelloResponse, error)
	// server streaming gRPC
	HelloServerStream(*HelloRequest, GreetignService_HelloServerStreamServer) error
	mustEmbedUnimplementedGreetignServiceServer()
}

// UnimplementedGreetignServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGreetignServiceServer struct {
}

func (UnimplementedGreetignServiceServer) Hello(context.Context, *HelloRequest) (*HelloResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Hello not implemented")
}
func (UnimplementedGreetignServiceServer) HelloServerStream(*HelloRequest, GreetignService_HelloServerStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method HelloServerStream not implemented")
}
func (UnimplementedGreetignServiceServer) mustEmbedUnimplementedGreetignServiceServer() {}

// UnsafeGreetignServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GreetignServiceServer will
// result in compilation errors.
type UnsafeGreetignServiceServer interface {
	mustEmbedUnimplementedGreetignServiceServer()
}

func RegisterGreetignServiceServer(s grpc.ServiceRegistrar, srv GreetignServiceServer) {
	s.RegisterService(&GreetignService_ServiceDesc, srv)
}

func _GreetignService_Hello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreetignServiceServer).Hello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/myapp.GreetignService/Hello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreetignServiceServer).Hello(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GreetignService_HelloServerStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(HelloRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GreetignServiceServer).HelloServerStream(m, &greetignServiceHelloServerStreamServer{stream})
}

type GreetignService_HelloServerStreamServer interface {
	Send(*HelloResponse) error
	grpc.ServerStream
}

type greetignServiceHelloServerStreamServer struct {
	grpc.ServerStream
}

func (x *greetignServiceHelloServerStreamServer) Send(m *HelloResponse) error {
	return x.ServerStream.SendMsg(m)
}

// GreetignService_ServiceDesc is the grpc.ServiceDesc for GreetignService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GreetignService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "myapp.GreetignService",
	HandlerType: (*GreetignServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Hello",
			Handler:    _GreetignService_Hello_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "HelloServerStream",
			Handler:       _GreetignService_HelloServerStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "hello.proto",
}
